[{"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\index.tsx":"1","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\reportWebVitals.ts":"2","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\App.tsx":"3","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Context\\index.tsx":"4","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Components\\Headers\\index.tsx":"5","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Components\\Link\\index.tsx":"6"},{"size":579,"mtime":1659425102000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1659425102000,"results":"9","hashOfConfig":"8"},{"size":2615,"mtime":1659687640000,"results":"10","hashOfConfig":"8"},{"size":1582,"mtime":1659425104000,"results":"11","hashOfConfig":"8"},{"size":3750,"mtime":1659722432000,"results":"12","hashOfConfig":"8"},{"size":2035,"mtime":1659529790000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1gbzkr3",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\index.tsx",[],["29","30"],"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\reportWebVitals.ts",[],"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\App.tsx",["31","32","33","34"],"import React, { useEffect, useContext, useCallback } from \"react\";\n\nimport Header from \"./Components/Headers\";\nimport Products from \"./Components/ProductTypes/Products\";\nimport Items from \"./Components/ProductTypes/Items\";\nimport Context from \"./Context\";\n\nimport styles from \"./App.module.scss\";\n\nconst App = () => {\n  const { linkSuccess, isItemAccess, dispatch } = useContext(Context);\n\n  const getInfo = useCallback(async () => {\n    const response = await fetch(\"/api/info\", { method: \"POST\" });\n    if (!response.ok) {\n      dispatch({ type: \"SET_STATE\", state: { backend: false } });\n      return { paymentInitiation: false };\n    }\n    const data = await response.json();\n    const paymentInitiation: boolean = data.products.includes(\n      \"payment_initiation\"\n    );\n    dispatch({\n      type: \"SET_STATE\",\n      state: {\n        products: data.products,\n      },\n    });\n    return { paymentInitiation };\n  }, [dispatch]);\n\n  const generateToken = useCallback(\n    async (paymentInitiation) => {\n      const path = paymentInitiation\n        ? \"/api/create_link_token_for_payment\"\n        : \"/api/create_link_token\";\n      const response = await fetch(path, {\n        method: \"POST\",\n      });\n      if (!response.ok) {\n        dispatch({ type: \"SET_STATE\", state: { linkToken: null } });\n        return;\n      }\n      const data = await response.json();\n      if (data) {\n        if (data.error != null) {\n          dispatch({\n            type: \"SET_STATE\",\n            state: {\n              linkToken: null,\n              linkTokenError: data.error,\n            },\n          });\n          return;\n        }\n        dispatch({ type: \"SET_STATE\", state: { linkToken: data.link_token } });\n      }\n      localStorage.setItem(\"link_token\", data.link_token); //to use later for Oauth\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    const init = async () => {\n      const { paymentInitiation } = await getInfo(); // used to determine which path to take when generating token\n      // do not generate a new token for OAuth redirect; instead\n      // setLinkToken from localStorage\n      if (window.location.href.includes(\"?oauth_state_id=\")) {\n        dispatch({\n          type: \"SET_STATE\",\n          state: {\n            linkToken: localStorage.getItem(\"link_token\"),\n          },\n        });\n        return;\n        \n      }\n      generateToken(paymentInitiation);\n    };\n    init();\n  }, [dispatch, generateToken, getInfo]);\n\n  return (\n    <div className={styles.App}>\n      <div className={styles.container}>\n        <Header />\n        \n        \n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Context\\index.tsx",[],"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Components\\Headers\\index.tsx",["35","36","37"],"import React, { useContext } from \"react\";\nimport Callout from \"plaid-threads/Callout\";\nimport Button from \"plaid-threads/Button\";\nimport InlineLink from \"plaid-threads/InlineLink\";\n\nimport Link from \"../Link\";\nimport Context from \"../../Context\";\n\nimport styles from \"./index.module.scss\";\nrequire('dotenv').config();\nconst Header = () => {\n  const {\n    itemId,\n    accessToken,\n    linkToken,\n    linkSuccess,\n    isItemAccess,\n    backend,\n    linkTokenError,\n  } = useContext(Context);\n\n  const handleClick = () => { \n    \n    let element = document.getElementById('handleclick');\n    let access; let item;\n    if(element){\n    access = element.getAttribute('data-access');\n    item = element.getAttribute('data-item');\n    }\n    window.location.href = process.env.REACT_APP_REDIRECT+\"plaid-success/\" + accessToken+'/'+itemId\n  }\n\n  return (\n    <div className={styles.grid}>\n      <h3 className={styles.title}>Crowdfunding</h3>\n      {!linkSuccess ? (\n        <>\n          <h4 className={styles.subtitle}>\n            We have Create secure link for payment \n          </h4>\n          <p className={styles.introPar}>\n            \n          </p>\n          {/* message if backend is not running and there is no link token */}\n          {!backend ? (\n            <Callout warning>\n              Unable to fetch link_token: please make sure your backend server\n              is running and that your .env file has been configured with your\n              <code>PLAID_CLIENT_ID</code> and <code>PLAID_SECRET</code>.\n            </Callout>\n          ) : /* message if backend is running and there is no link token */\n          linkToken == null && backend ? (\n            <Callout warning>\n              <div>\n                Unable to fetch link_token: please make sure your backend server\n                is running and that your .env file has been configured\n                correctly.\n              </div>\n              <div>\n                If you are on a Windows machine, please ensure that you have\n                cloned the repo with{\" \"}\n                <InlineLink\n                  href=\"https://github.com/plaid/quickstart#special-instructions-for-windows\"\n                  target=\"_blank\"\n                >\n                  symlinks turned on.\n                </InlineLink>{\" \"}\n                You can also try checking your{\" \"}\n                <InlineLink\n                  href=\"https://dashboard.plaid.com/activity/logs\"\n                  target=\"_blank\"\n                >\n                  activity log\n                </InlineLink>{\" \"}\n                on your Plaid dashboard.\n              </div>\n              <div>\n                Error Code: <code>{linkTokenError.error_code}</code>\n              </div>\n              <div>\n                Error Type: <code>{linkTokenError.error_type}</code>{\" \"}\n              </div>\n              <div>Error Message: {linkTokenError.error_message}</div>\n            </Callout>\n          ) : linkToken === \"\" ? (\n            <div className={styles.linkButton}>\n              <Button large disabled>\n                Loading...\n              </Button>\n            </div>\n          ) : (\n            <div className={styles.linkButton}>\n              <Link />\n            </div>\n          )}\n        </>\n      ) : (\n        <>\n          {isItemAccess ? (\n            <h4 className={styles.subtitle}>\n            </h4>\n          ) : (\n            <h4 className={styles.subtitle}>\n              \n            </h4>\n          )}\n          \n          {isItemAccess && (\n            <img onLoad={ handleClick } src={'/images/plaid.gif'} data-a={itemId} data-b={accessToken}/>\n            \n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nHeader.displayName = \"Header\";\n\nexport default Header;\n","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Components\\Link\\index.tsx",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":4,"column":8,"nodeType":"44","messageId":"45","endLine":4,"endColumn":16},{"ruleId":"42","severity":1,"message":"46","line":5,"column":8,"nodeType":"44","messageId":"45","endLine":5,"endColumn":13},{"ruleId":"42","severity":1,"message":"47","line":11,"column":11,"nodeType":"44","messageId":"45","endLine":11,"endColumn":22},{"ruleId":"42","severity":1,"message":"48","line":11,"column":24,"nodeType":"44","messageId":"45","endLine":11,"endColumn":36},{"ruleId":"42","severity":1,"message":"49","line":27,"column":5,"nodeType":"44","messageId":"45","endLine":27,"endColumn":11},{"ruleId":"42","severity":1,"message":"50","line":28,"column":5,"nodeType":"44","messageId":"45","endLine":28,"endColumn":9},{"ruleId":"51","severity":1,"message":"52","line":109,"column":13,"nodeType":"53","endLine":109,"endColumn":105},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"@typescript-eslint/no-unused-vars","'Products' is defined but never used.","Identifier","unusedVar","'Items' is defined but never used.","'linkSuccess' is assigned a value but never used.","'isItemAccess' is assigned a value but never used.","'access' is assigned a value but never used.","'item' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]