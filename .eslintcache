[{"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\index.tsx":"1","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\reportWebVitals.ts":"2","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\App.tsx":"3","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Context\\index.tsx":"4","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\ProductTypes\\Products.tsx":"5","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\ProductTypes\\Items.tsx":"6","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Headers\\index.tsx":"7","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\dataUtilities.ts":"8","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\ProductTypes\\ProductTypesContainer\\index.tsx":"9","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Endpoint\\index.tsx":"10","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Link\\index.tsx":"11","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Table\\index.tsx":"12","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Error\\index.tsx":"13","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Table\\Identity.tsx":"14","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\index.tsx":"15","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\reportWebVitals.ts":"16","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\App.tsx":"17","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Context\\index.tsx":"18","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Components\\Headers\\index.tsx":"19","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Components\\Link\\index.tsx":"20"},{"size":579,"mtime":1659425101480,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":1659425101575,"results":"23","hashOfConfig":"22"},{"size":2615,"mtime":1659687639349,"results":"24","hashOfConfig":"22"},{"size":1582,"mtime":1659425102294,"results":"25","hashOfConfig":"22"},{"size":4865,"mtime":1659425102076,"results":"26","hashOfConfig":"22"},{"size":1008,"mtime":1659425102017,"results":"27","hashOfConfig":"22"},{"size":3750,"mtime":1659722431481,"results":"28","hashOfConfig":"22"},{"size":15568,"mtime":1659425101431,"results":"29","hashOfConfig":"22"},{"size":428,"mtime":1659425102144,"results":"30","hashOfConfig":"22"},{"size":2865,"mtime":1659425101760,"results":"31","hashOfConfig":"22"},{"size":2035,"mtime":1659529788343,"results":"32","hashOfConfig":"22"},{"size":1228,"mtime":1659425102259,"results":"33","hashOfConfig":"22"},{"size":2546,"mtime":1659425101831,"results":"34","hashOfConfig":"22"},{"size":1030,"mtime":1659425102205,"results":"35","hashOfConfig":"22"},{"size":579,"mtime":1659425102000,"results":"36","hashOfConfig":"37"},{"size":425,"mtime":1659425102000,"results":"38","hashOfConfig":"37"},{"size":2615,"mtime":1659687640000,"results":"39","hashOfConfig":"37"},{"size":1582,"mtime":1659425104000,"results":"40","hashOfConfig":"37"},{"size":3750,"mtime":1659722432000,"results":"41","hashOfConfig":"37"},{"size":2035,"mtime":1659529790000,"results":"42","hashOfConfig":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"gs1060",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"1gbzkr3",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"77"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\index.tsx",[],["89","90"],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\reportWebVitals.ts",[],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\App.tsx",["91","92","93","94"],"import React, { useEffect, useContext, useCallback } from \"react\";\n\nimport Header from \"./Components/Headers\";\nimport Products from \"./Components/ProductTypes/Products\";\nimport Items from \"./Components/ProductTypes/Items\";\nimport Context from \"./Context\";\n\nimport styles from \"./App.module.scss\";\n\nconst App = () => {\n  const { linkSuccess, isItemAccess, dispatch } = useContext(Context);\n\n  const getInfo = useCallback(async () => {\n    const response = await fetch(\"/api/info\", { method: \"POST\" });\n    if (!response.ok) {\n      dispatch({ type: \"SET_STATE\", state: { backend: false } });\n      return { paymentInitiation: false };\n    }\n    const data = await response.json();\n    const paymentInitiation: boolean = data.products.includes(\n      \"payment_initiation\"\n    );\n    dispatch({\n      type: \"SET_STATE\",\n      state: {\n        products: data.products,\n      },\n    });\n    return { paymentInitiation };\n  }, [dispatch]);\n\n  const generateToken = useCallback(\n    async (paymentInitiation) => {\n      const path = paymentInitiation\n        ? \"/api/create_link_token_for_payment\"\n        : \"/api/create_link_token\";\n      const response = await fetch(path, {\n        method: \"POST\",\n      });\n      if (!response.ok) {\n        dispatch({ type: \"SET_STATE\", state: { linkToken: null } });\n        return;\n      }\n      const data = await response.json();\n      if (data) {\n        if (data.error != null) {\n          dispatch({\n            type: \"SET_STATE\",\n            state: {\n              linkToken: null,\n              linkTokenError: data.error,\n            },\n          });\n          return;\n        }\n        dispatch({ type: \"SET_STATE\", state: { linkToken: data.link_token } });\n      }\n      localStorage.setItem(\"link_token\", data.link_token); //to use later for Oauth\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    const init = async () => {\n      const { paymentInitiation } = await getInfo(); // used to determine which path to take when generating token\n      // do not generate a new token for OAuth redirect; instead\n      // setLinkToken from localStorage\n      if (window.location.href.includes(\"?oauth_state_id=\")) {\n        dispatch({\n          type: \"SET_STATE\",\n          state: {\n            linkToken: localStorage.getItem(\"link_token\"),\n          },\n        });\n        return;\n        \n      }\n      generateToken(paymentInitiation);\n    };\n    init();\n  }, [dispatch, generateToken, getInfo]);\n\n  return (\n    <div className={styles.App}>\n      <div className={styles.container}>\n        <Header />\n        \n        \n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Context\\index.tsx",[],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\ProductTypes\\Products.tsx",[],["95","96"],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\ProductTypes\\Items.tsx",[],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Headers\\index.tsx",["97","98","99"],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\dataUtilities.ts",["100","101"],"import {\n  AuthGetResponse,\n  Transaction,\n  IdentityGetResponse,\n  InvestmentsHoldingsGetResponse,\n  InvestmentsTransactionsGetResponse,\n  AccountsGetResponse,\n  ItemGetResponse,\n  InstitutionsGetByIdResponse,\n  LiabilitiesGetResponse,\n  PaymentInitiationPaymentGetResponse,\n  AssetReportGetResponse,\n  AssetReport,\n  TransferGetResponse,\n  IncomeVerificationPaystubsGetResponse,\n  Paystub,\n  Earnings,\n} from \"plaid/dist/api\";\n\nconst formatCurrency = (\n  number: number | null | undefined,\n  code: string | null | undefined\n) => {\n  if (number != null && number !== undefined) {\n    return ` ${parseFloat(number.toFixed(2)).toLocaleString(\"en\")} ${code}`;\n  }\n  return \"no data\";\n};\n\nexport interface Categories {\n  title: string;\n  field: string;\n}\n\n//interfaces for categories in each individual product\ninterface AuthDataItem {\n  routing: string;\n  account: string;\n  balance: string;\n  name: string;\n}\ninterface TransactionsDataItem {\n  amount: string;\n  date: string;\n  name: string;\n}\n\ninterface IdentityDataItem {\n  addresses: string;\n  phoneNumbers: string;\n  emails: string;\n  names: string;\n}\n\ninterface BalanceDataItem {\n  balance: string;\n  subtype: string | null;\n  mask: string;\n  name: string;\n}\n\ninterface InvestmentsDataItem {\n  mask: string;\n  quantity: string;\n  price: string;\n  value: string;\n  name: string;\n}\n\ninterface InvestmentsTransactionItem {\n  amount: number;\n  date: string;\n  name: string;\n}\n\ninterface LiabilitiessDataItem {\n  amount: string;\n  date: string;\n  name: string;\n  type: string;\n}\n\ninterface PaymentDataItem {\n  paymentId: string;\n  amount: string;\n  status: string;\n  statusUpdate: string;\n  recipientId: string;\n}\ninterface ItemDataItem {\n  billed: string;\n  available: string;\n  name: string;\n}\n\ninterface AssetsDataItem {\n  account: string;\n  balance: string;\n  transactions: number;\n  daysAvailable: number;\n}\n\ninterface TransferDataItem {\n  transferId: string;\n  amount: string;\n  type: string;\n  achClass: string;\n  network: string;\n}\n\ninterface IncomePaystubsDataItem {\n  description: string;\n  currentAmount: number | null;\n  currency: number | null;\n}\n\nexport interface ErrorDataItem {\n  error_type: string;\n  error_code: string;\n  error_message: string;\n  display_message: string | null;\n  status_code: number | null;\n}\n\n//all possible product data interfaces\nexport type DataItem =\n  | AuthDataItem\n  | TransactionsDataItem\n  | IdentityDataItem\n  | BalanceDataItem\n  | InvestmentsDataItem\n  | InvestmentsTransactionItem\n  | LiabilitiessDataItem\n  | ItemDataItem\n  | PaymentDataItem\n  | AssetsDataItem\n  | TransferDataItem\n  | IncomePaystubsDataItem;\n\nexport type Data = Array<DataItem>;\n\nexport const authCategories: Array<Categories> = [\n  {\n    title: \"Name\",\n    field: \"name\",\n  },\n  {\n    title: \"Balance\",\n    field: \"balance\",\n  },\n  {\n    title: \"Account #\",\n    field: \"account\",\n  },\n  {\n    title: \"Routing #\",\n    field: \"routing\",\n  },\n];\n\nexport const transactionsCategories: Array<Categories> = [\n  {\n    title: \"Name\",\n    field: \"name\",\n  },\n  {\n    title: \"Amount\",\n    field: \"amount\",\n  },\n  {\n    title: \"Date\",\n    field: \"date\",\n  },\n];\n\nexport const identityCategories: Array<Categories> = [\n  {\n    title: \"Names\",\n    field: \"names\",\n  },\n  {\n    title: \"Emails\",\n    field: \"emails\",\n  },\n  {\n    title: \"Phone numbers\",\n    field: \"phoneNumbers\",\n  },\n  {\n    title: \"Addresses\",\n    field: \"addresses\",\n  },\n];\n\nexport const balanceCategories: Array<Categories> = [\n  {\n    title: \"Name\",\n    field: \"name\",\n  },\n  {\n    title: \"Balance\",\n    field: \"balance\",\n  },\n  {\n    title: \"Subtype\",\n    field: \"subtype\",\n  },\n  {\n    title: \"Mask\",\n    field: \"mask\",\n  },\n];\n\nexport const investmentsCategories: Array<Categories> = [\n  {\n    title: \"Account Mask\",\n    field: \"mask\",\n  },\n  {\n    title: \"Name\",\n    field: \"name\",\n  },\n  {\n    title: \"Quantity\",\n    field: \"quantity\",\n  },\n  {\n    title: \"Close Price\",\n    field: \"price\",\n  },\n  {\n    title: \"Value\",\n    field: \"value\",\n  },\n];\n\nexport const investmentsTransactionsCategories: Array<Categories> = [\n  {\n    title: \"Name\",\n    field: \"name\",\n  },\n  {\n    title: \"Amount\",\n    field: \"amount\",\n  },\n  {\n    title: \"Date\",\n    field: \"date\",\n  },\n];\n\nexport const liabilitiesCategories: Array<Categories> = [\n  {\n    title: \"Name\",\n    field: \"name\",\n  },\n  {\n    title: \"Type\",\n    field: \"type\",\n  },\n  {\n    title: \"Last Payment Date\",\n    field: \"date\",\n  },\n  {\n    title: \"Last Payment Amount\",\n    field: \"amount\",\n  },\n];\n\nexport const itemCategories: Array<Categories> = [\n  {\n    title: \"Institution Name\",\n    field: \"name\",\n  },\n  {\n    title: \"Billed Products\",\n    field: \"billed\",\n  },\n  {\n    title: \"Available Products\",\n    field: \"available\",\n  },\n];\n\nexport const accountsCategories: Array<Categories> = [\n  {\n    title: \"Name\",\n    field: \"name\",\n  },\n  {\n    title: \"Balance\",\n    field: \"balance\",\n  },\n  {\n    title: \"Subtype\",\n    field: \"subtype\",\n  },\n  {\n    title: \"Mask\",\n    field: \"mask\",\n  },\n];\n\nexport const paymentCategories: Array<Categories> = [\n  {\n    title: \"Payment ID\",\n    field: \"paymentId\",\n  },\n  {\n    title: \"Amount\",\n    field: \"amount\",\n  },\n  {\n    title: \"Status\",\n    field: \"status\",\n  },\n  {\n    title: \"Status Update\",\n    field: \"statusUpdate\",\n  },\n  {\n    title: \"Recipient ID\",\n    field: \"recipientId\",\n  },\n];\n\nexport const assetsCategories: Array<Categories> = [\n  {\n    title: \"Account\",\n    field: \"account\",\n  },\n  {\n    title: \"Transactions\",\n    field: \"transactions\",\n  },\n  {\n    title: \"Balance\",\n    field: \"balance\",\n  },\n  {\n    title: \"Days Available\",\n    field: \"daysAvailable\",\n  },\n];\n\nexport const transferCategories: Array<Categories> = [\n  {\n    title: \"Transfer ID\",\n    field: \"transferId\",\n  },\n  {\n    title: \"Amount\",\n    field: \"amount\",\n  },\n  {\n    title: \"Type\",\n    field: \"type\",\n  },\n  {\n    title: \"ACH Class\",\n    field: \"achClass\",\n  },\n  {\n    title: \"Network\",\n    field: \"network\",\n  },\n  {\n    title: \"Status\",\n    field: \"status\",\n  },\n];\n\nexport const incomePaystubsCategories: Array<Categories> = [\n  {\n    title: \"Description\",\n    field: \"description\",\n  },\n  {\n    title: \"Current Amount\",\n    field: \"currentAmount\",\n  },\n  {\n    title: \"Currency\",\n    field: \"currency\",\n  }\n]\n\nexport const transformAuthData = (data: AuthGetResponse) => {\n  return data.numbers.ach!.map((achNumbers) => {\n    const account = data.accounts!.filter((a) => {\n      return a.account_id === achNumbers.account_id;\n    })[0];\n    const balance: number | null | undefined =\n      account.balances.available || account.balances.current;\n    const obj: DataItem = {\n      name: account.name,\n      balance: formatCurrency(balance, account.balances.iso_currency_code),\n      account: achNumbers.account!,\n      routing: achNumbers.routing!,\n    };\n    return obj;\n  });\n};\n\nexport const transformTransactionsData = (\n  data: {latest_transactions: Transaction[]}\n): Array<DataItem> => {\n  return data.latest_transactions!.map((t) => {\n    const item: DataItem = {\n      name: t.name!,\n      amount: formatCurrency(t.amount!, t.iso_currency_code),\n      date: t.date,\n    };\n    return item;\n  });\n};\n\ninterface IdentityData {\n  identity: IdentityGetResponse[\"accounts\"];\n}\n\nexport const transformIdentityData = (data: IdentityData) => {\n  const final: Array<DataItem> = [];\n  const identityData = data.identity![0];\n  identityData.owners.forEach((owner) => {\n    const names = owner.names.map((name) => {\n      return name;\n    });\n    const emails = owner.emails.map((email) => {\n      return email.data;\n    });\n    const phones = owner.phone_numbers.map((phone) => {\n      return phone.data;\n    });\n    const addresses = owner.addresses.map((address) => {\n      return `${address.data.street} ${address.data.city}, ${address.data.region} ${address.data.postal_code}`;\n    });\n\n    const num = Math.max(\n      emails.length,\n      names.length,\n      phones.length,\n      addresses.length\n    );\n\n    for (let i = 0; i < num; i++) {\n      const obj = {\n        names: names[i] || \"\",\n        emails: emails[i] || \"\",\n        phoneNumbers: phones[i] || \"\",\n        addresses: addresses[i] || \"\",\n      };\n      final.push(obj);\n    }\n  });\n\n  return final;\n};\n\nexport const transformBalanceData = (data: AccountsGetResponse) => {\n  const balanceData = data.accounts;\n  return balanceData.map((account) => {\n    const balance: number | null | undefined =\n      account.balances.available || account.balances.current;\n    const obj: DataItem = {\n      name: account.name,\n      balance: formatCurrency(balance, account.balances.iso_currency_code),\n      subtype: account.subtype,\n      mask: account.mask!,\n    };\n    return obj;\n  });\n};\n\ninterface InvestmentData {\n  error: null;\n  holdings: InvestmentsHoldingsGetResponse;\n}\n\nexport const transformInvestmentsData = (data: InvestmentData) => {\n  const holdingsData = data.holdings.holdings!.sort(function (a, b) {\n    if (a.account_id > b.account_id) return 1;\n    return -1;\n  });\n  return holdingsData.map((holding) => {\n    const account = data.holdings.accounts!.filter(\n      (acc) => acc.account_id === holding.account_id\n    )[0];\n    const security = data.holdings.securities!.filter(\n      (sec) => sec.security_id === holding.security_id\n    )[0];\n    const value = holding.quantity * security.close_price!;\n\n    const obj: DataItem = {\n      mask: account.mask!,\n      name: security.name!,\n      quantity: formatCurrency(holding.quantity, \"\"),\n      price: formatCurrency(\n        security.close_price!,\n        account.balances.iso_currency_code\n      ),\n      value: formatCurrency(value, account.balances.iso_currency_code),\n    };\n    return obj;\n  });\n};\n\ninterface InvestmentsTransactionData {\n  error: null;\n  investments_transactions: InvestmentsTransactionsGetResponse;\n}\n\nexport const transformInvestmentTransactionsData = (data: InvestmentsTransactionData) => {\n  const investmentTransactionsData = data.investments_transactions.investment_transactions!.sort(function (a,b) {\n    if (a.account_id > b.account_id) return 1;\n    return -1;\n  });\n  return investmentTransactionsData.map((investmentTransaction) => {\n    const security = data.investments_transactions.securities!.filter(\n      (sec) => sec.security_id === investmentTransaction.security_id\n    )[0];\n\n    const obj: DataItem = {\n      name: security.name!,\n      amount: investmentTransaction.amount,\n      date: investmentTransaction.date,\n    };\n    return obj;\n  });\n};\n\ninterface LiabilitiesDataResponse {\n  error: null;\n  liabilities: LiabilitiesGetResponse;\n}\n\nexport const transformLiabilitiesData = (data: LiabilitiesDataResponse) => {\n  const liabilitiesData = data.liabilities.liabilities;\n  //console.log(liabilitiesData)\n  //console.log(\"random\")\n  const credit = liabilitiesData.credit!.map((credit) => {\n    const account = data.liabilities.accounts.filter(\n      (acc) => acc.account_id === credit.account_id\n    )[0];\n    const obj: DataItem = {\n      name: account.name,\n      type: \"credit card\",\n      date: credit.last_payment_date ?? \"\",\n      amount: formatCurrency(\n        credit.last_payment_amount,\n        account.balances.iso_currency_code\n      ),\n    };\n    return obj;\n  });\n\n  const mortgages = liabilitiesData.mortgage?.map((mortgage) => {\n    const account = data.liabilities.accounts.filter(\n      (acc) => acc.account_id === mortgage.account_id\n    )[0];\n    const obj: DataItem = {\n      name: account.name,\n      type: \"mortgage\",\n      date: mortgage.last_payment_date!,\n      amount: formatCurrency(\n        mortgage.last_payment_amount!,\n        account.balances.iso_currency_code\n      ),\n    };\n    return obj;\n  });\n\n  const student = liabilitiesData.student?.map((student) => {\n    const account = data.liabilities.accounts.filter(\n      (acc) => acc.account_id === student.account_id\n    )[0];\n    const obj: DataItem = {\n      name: account.name,\n      type: \"student loan\",\n      date: student.last_payment_date!,\n      amount: formatCurrency(\n        student.last_payment_amount!,\n        account.balances.iso_currency_code\n      ),\n    };\n    return obj;\n  });\n\n  return credit!.concat(mortgages!).concat(student!);\n};\n\nexport const transformTransferData = (data: TransferGetResponse): Array<DataItem> => {\n  const transferData = data.transfer;\n  return [\n    {\n      transferId: transferData.id,\n      amount: transferData.amount,\n      type: transferData.type,\n      achClass: transferData.ach_class,\n      network: transferData.network,\n      status: transferData.status,\n    },\n  ];\n};\n\ninterface ItemData {\n  item: ItemGetResponse[\"item\"];\n  institution: InstitutionsGetByIdResponse[\"institution\"];\n}\n\nexport const transformItemData = (data: ItemData): Array<DataItem> => {\n  return [\n    {\n      name: data.institution.name,\n      billed: data.item.billed_products.join(\", \"),\n      available: data.item.available_products.join(\", \"),\n    },\n  ];\n};\n\nexport const transformAccountsData = (data: AccountsGetResponse) => {\n  const accountsData = data.accounts;\n  return accountsData.map((account) => {\n    const balance: number | null | undefined =\n      account.balances.available || account.balances.current;\n    const obj: DataItem = {\n      name: account.name,\n      balance: formatCurrency(balance, account.balances.iso_currency_code),\n      subtype: account.subtype,\n      mask: account.mask!,\n    };\n    return obj;\n  });\n};\n\ninterface PaymentData {\n  payment: PaymentInitiationPaymentGetResponse;\n}\n\nexport const transformPaymentData = (data: PaymentData) => {\n  const statusUpdate =\n    typeof data.payment.last_status_update === \"string\"\n      ? data.payment.last_status_update.replace(\"T\", \" \").replace(\"Z\", \"\")\n      : new Date(data.payment.last_status_update * 1000) // Java data comes as timestamp\n          .toISOString()\n          .replace(\"T\", \" \")\n          .replace(\"Z\", \"\");\n  return [\n    {\n      paymentId: data.payment.payment_id,\n      amount: `${data.payment.amount.currency} ${data.payment.amount.value}`,\n      status: data.payment.status,\n      statusUpdate: statusUpdate,\n      recipientId: data.payment.recipient_id,\n    },\n  ];\n};\n\ninterface AssetResponseData {\n  json: AssetReport;\n}\n\nexport const transformAssetsData = (data: AssetResponseData) => {\n  const assetItems = data.json.items;\n  return assetItems.flatMap((item) => {\n    return item.accounts.map((account) => {\n      const balance: number | null | undefined =\n        account.balances.available || account.balances.current;\n      const obj: DataItem = {\n        account: account.name,\n        balance: formatCurrency(balance, account.balances.iso_currency_code),\n        transactions: account.transactions!.length,\n        daysAvailable: account.days_available!,\n      };\n      return obj;\n    });\n  });\n};\n\ninterface IncomePaystub {\n  paystubs: IncomeVerificationPaystubsGetResponse,\n}\n\nexport const transformIncomePaystubsData = (data: IncomePaystub) => {\n  const paystubsItemsArray: Array<Paystub> = data.paystubs.paystubs\n  var finalArray: Array<IncomePaystubsDataItem> = []\n  for (var i = 0; i < paystubsItemsArray.length; i++){\n    var ActualEarningVariable: any = paystubsItemsArray[i].earnings\n    for (var j = 0; j < ActualEarningVariable.breakdown.length; j++){\n      var payStubItem: IncomePaystubsDataItem = {\n        description: paystubsItemsArray[i].employer.name + '_' + ActualEarningVariable.breakdown[j].description,\n        currentAmount: ActualEarningVariable.breakdown[j].current_amount,\n        currency: ActualEarningVariable.breakdown[j].iso_currency_code\n      }\n    finalArray.push(payStubItem)\n  }\n}\n  return finalArray\n}\n","C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\ProductTypes\\ProductTypesContainer\\index.tsx",[],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Endpoint\\index.tsx",[],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Link\\index.tsx",[],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Table\\index.tsx",[],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Error\\index.tsx",[],"C:\\xampp1\\htdocs\\quickstart-master\\quickstart-master\\frontend\\src\\Components\\Table\\Identity.tsx",[],"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\index.tsx",[],["102","103"],"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\reportWebVitals.ts",[],"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\App.tsx",["104","105","106","107"],"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Context\\index.tsx",[],"C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Components\\Headers\\index.tsx",["108","109","110"],"import React, { useContext } from \"react\";\nimport Callout from \"plaid-threads/Callout\";\nimport Button from \"plaid-threads/Button\";\nimport InlineLink from \"plaid-threads/InlineLink\";\n\nimport Link from \"../Link\";\nimport Context from \"../../Context\";\n\nimport styles from \"./index.module.scss\";\nrequire('dotenv').config();\nconst Header = () => {\n  const {\n    itemId,\n    accessToken,\n    linkToken,\n    linkSuccess,\n    isItemAccess,\n    backend,\n    linkTokenError,\n  } = useContext(Context);\n\n  const handleClick = () => { \n    \n    let element = document.getElementById('handleclick');\n    let access; let item;\n    if(element){\n    access = element.getAttribute('data-access');\n    item = element.getAttribute('data-item');\n    }\n    window.location.href = process.env.REACT_APP_REDIRECT+\"plaid-success/\" + accessToken+'/'+itemId\n  }\n\n  return (\n    <div className={styles.grid}>\n      <h3 className={styles.title}>Crowdfunding</h3>\n      {!linkSuccess ? (\n        <>\n          <h4 className={styles.subtitle}>\n            We have Create secure link for payment \n          </h4>\n          <p className={styles.introPar}>\n            \n          </p>\n          {/* message if backend is not running and there is no link token */}\n          {!backend ? (\n            <Callout warning>\n              Unable to fetch link_token: please make sure your backend server\n              is running and that your .env file has been configured with your\n              <code>PLAID_CLIENT_ID</code> and <code>PLAID_SECRET</code>.\n            </Callout>\n          ) : /* message if backend is running and there is no link token */\n          linkToken == null && backend ? (\n            <Callout warning>\n              <div>\n                Unable to fetch link_token: please make sure your backend server\n                is running and that your .env file has been configured\n                correctly.\n              </div>\n              <div>\n                If you are on a Windows machine, please ensure that you have\n                cloned the repo with{\" \"}\n                <InlineLink\n                  href=\"https://github.com/plaid/quickstart#special-instructions-for-windows\"\n                  target=\"_blank\"\n                >\n                  symlinks turned on.\n                </InlineLink>{\" \"}\n                You can also try checking your{\" \"}\n                <InlineLink\n                  href=\"https://dashboard.plaid.com/activity/logs\"\n                  target=\"_blank\"\n                >\n                  activity log\n                </InlineLink>{\" \"}\n                on your Plaid dashboard.\n              </div>\n              <div>\n                Error Code: <code>{linkTokenError.error_code}</code>\n              </div>\n              <div>\n                Error Type: <code>{linkTokenError.error_type}</code>{\" \"}\n              </div>\n              <div>Error Message: {linkTokenError.error_message}</div>\n            </Callout>\n          ) : linkToken === \"\" ? (\n            <div className={styles.linkButton}>\n              <Button large disabled>\n                Loading...\n              </Button>\n            </div>\n          ) : (\n            <div className={styles.linkButton}>\n              <Link />\n            </div>\n          )}\n        </>\n      ) : (\n        <>\n          {isItemAccess ? (\n            <h4 className={styles.subtitle}>\n            </h4>\n          ) : (\n            <h4 className={styles.subtitle}>\n              \n            </h4>\n          )}\n          \n          {isItemAccess && (\n            <img onLoad={ handleClick } src={'/images/plaid.gif'} data-a={itemId} data-b={accessToken}/>\n            \n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nHeader.displayName = \"Header\";\n\nexport default Header;\n","C:\\xampp1\\htdocs\\plaid\\frontend\\src\\Components\\Link\\index.tsx",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":16},{"ruleId":"115","severity":1,"message":"119","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":13},{"ruleId":"115","severity":1,"message":"120","line":11,"column":11,"nodeType":"117","messageId":"118","endLine":11,"endColumn":22},{"ruleId":"115","severity":1,"message":"121","line":11,"column":24,"nodeType":"117","messageId":"118","endLine":11,"endColumn":36},{"ruleId":"111","replacedBy":"122"},{"ruleId":"113","replacedBy":"123"},{"ruleId":"115","severity":1,"message":"124","line":27,"column":5,"nodeType":"117","messageId":"118","endLine":27,"endColumn":11},{"ruleId":"115","severity":1,"message":"125","line":28,"column":5,"nodeType":"117","messageId":"118","endLine":28,"endColumn":9},{"ruleId":"126","severity":1,"message":"127","line":109,"column":13,"nodeType":"128","endLine":109,"endColumn":105},{"ruleId":"115","severity":1,"message":"129","line":12,"column":3,"nodeType":"117","messageId":"118","endLine":12,"endColumn":25},{"ruleId":"115","severity":1,"message":"130","line":17,"column":3,"nodeType":"117","messageId":"118","endLine":17,"endColumn":11},{"ruleId":"111","replacedBy":"131"},{"ruleId":"113","replacedBy":"132"},{"ruleId":"115","severity":1,"message":"116","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":16},{"ruleId":"115","severity":1,"message":"119","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":13},{"ruleId":"115","severity":1,"message":"120","line":11,"column":11,"nodeType":"117","messageId":"118","endLine":11,"endColumn":22},{"ruleId":"115","severity":1,"message":"121","line":11,"column":24,"nodeType":"117","messageId":"118","endLine":11,"endColumn":36},{"ruleId":"115","severity":1,"message":"124","line":27,"column":5,"nodeType":"117","messageId":"118","endLine":27,"endColumn":11},{"ruleId":"115","severity":1,"message":"125","line":28,"column":5,"nodeType":"117","messageId":"118","endLine":28,"endColumn":9},{"ruleId":"126","severity":1,"message":"127","line":109,"column":13,"nodeType":"128","endLine":109,"endColumn":105},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"@typescript-eslint/no-unused-vars","'Products' is defined but never used.","Identifier","unusedVar","'Items' is defined but never used.","'linkSuccess' is assigned a value but never used.","'isItemAccess' is assigned a value but never used.",["133"],["134"],"'access' is assigned a value but never used.","'item' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AssetReportGetResponse' is defined but never used.","'Earnings' is defined but never used.",["133"],["134"],"no-global-assign","no-unsafe-negation"]